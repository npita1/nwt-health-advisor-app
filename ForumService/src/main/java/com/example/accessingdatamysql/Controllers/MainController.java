package com.example.accessingdatamysql.Controllers;
import com.example.accessingdatamysql.DataService.UserDataService;
import com.example.accessingdatamysql.Entity.*;
import com.example.accessingdatamysql.Repository.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

@Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private DoctorInfoRepository doctorInfoRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private ArticleRepository articleRepository;

    @Autowired
    private ForumQuestionRepository forumQuestionRepository;

    @Autowired
    private ForumAnswerRepository forumAnswerRepository;

    @PostMapping(path="/addUser")
    public @ResponseBody String addNewUser (@RequestBody User user) {
        userRepository.save(user);
        return "User Saved";
    }

    @PostMapping(path="/addDoctor")
    public @ResponseBody String addNewDoctor (@RequestBody DoctorInfo doctor) {

        doctorInfoRepository.save(doctor);
        return "Doctor Saved";
    }

    @PostMapping(path="/addCategory")
    public @ResponseBody String addNewCategory (@RequestBody Category category) {
        categoryRepository.save(category);
        return "Category Saved";
    }

    @PostMapping(path="/addArticle")
    public @ResponseBody String addNewArticle (@RequestBody Article article) {
        articleRepository.save(article);
        return "Article Saved";
    }

    @PostMapping(path="/addForumQuestion")
    public @ResponseBody String addNewForumQuestion (@RequestBody ForumQuestion forumQuestion) {
        forumQuestionRepository.save(forumQuestion);
        return "Forum Question Saved";
    }

    @PostMapping(path="/addForumAnswer")
    public @ResponseBody String addNewForumAnswer (@RequestBody ForumAnswer forumAnswer) {
        forumAnswerRepository.save(forumAnswer);
        return "Forum Answer Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

}