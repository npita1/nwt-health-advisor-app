package com.example.accessingdatamysql.controller;

import com.example.accessingdatamysql.entity.AppointmentEntity;
import com.example.accessingdatamysql.entity.DoctorInfoEntity;
import com.example.accessingdatamysql.entity.EventEntity;
import com.example.accessingdatamysql.entity.UserEntity;
import com.example.accessingdatamysql.exceptions.AppointmentNotFoundException;
import com.example.accessingdatamysql.exceptions.DoctorInfoNotFoundException;
import com.example.accessingdatamysql.exceptions.ReservationNotFoundException;
import com.example.accessingdatamysql.exceptions.UserNotFoundException;
import com.example.accessingdatamysql.feign.UserInterface;
import com.example.accessingdatamysql.repository.AppointmentRepository;
import com.example.accessingdatamysql.repository.DoctorInfoRepository;
import com.example.accessingdatamysql.repository.UserRepository;
import com.example.accessingdatamysql.service.AppointmentService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.fge.jsonpatch.JsonPatch;
import com.github.fge.jsonpatch.JsonPatchException;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController// This means that this class is a Controller
@Validated
@RequestMapping(path="/reservation") // This means URL's start with /demo (after Application path)
public class AppointmentController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    UserInterface userClient;
    @Autowired
    private DoctorInfoRepository doctorInfoRepository;

    @Autowired
    private AppointmentRepository appointmentRepository;
    private ObjectMapper objectMapper = new ObjectMapper();
    @Autowired
    private AppointmentService appointmentService;
    @PostMapping(path="/addAppointment1")
    public  @ResponseBody String addNewAppointment( @Valid @RequestBody AppointmentEntity appointment){
        appointmentRepository.save(appointment);
        return "Saved";
    }
    @GetMapping(path="/allAppointments")
    public @ResponseBody Iterable<AppointmentEntity> getAllAppointments() {
        // This returns a JSON or XML with the users
        return appointmentRepository.findAll();
    }
    @GetMapping("/appointments/{appointmentId}")
    public AppointmentEntity getEvent(@PathVariable int appointmentId) {
        AppointmentEntity appointment = appointmentRepository.findById(appointmentId);


        if (appointment == null) {
            throw new AppointmentNotFoundException("Not found appointment by id " + appointmentId);
        }

        return appointment;
    }
    @PatchMapping(path = "/appointments/{id}", consumes = "application/json-patch+json")
    public @ResponseBody ResponseEntity Update(@PathVariable("id") Long id, @RequestBody JsonPatch patch) throws JsonPatchException, JsonProcessingException {
        AppointmentEntity appointment = appointmentService.Details(id);
        AppointmentEntity appointmentPatched = applyPatchToAppointment(patch, appointment);
        appointmentService.Update(appointmentPatched);
        return ResponseEntity.status(200).body(appointmentPatched);

    }

    private AppointmentEntity applyPatchToAppointment(JsonPatch patch, AppointmentEntity targetAppointment) throws JsonProcessingException, JsonPatchException {
        JsonNode patched = patch.apply(objectMapper.convertValue(targetAppointment, JsonNode.class));
        return objectMapper.treeToValue(patched, AppointmentEntity.class);
    }
    @GetMapping("/appointments/doctor/{doctorName}")
    public Iterable<AppointmentEntity> getAppointmentsByDoctorName(@PathVariable String doctorName) {
        return appointmentService.ListAppointmentsByDoctorName(doctorName);
    }
    @GetMapping("/appointments/user/{userName}/description/{description}")
    public Iterable<AppointmentEntity> getAppointmentsByUserAndDescription(@PathVariable String userName, @PathVariable String description) {
        return appointmentService.ListAppointmentsByDescriptionAndUserName(userName,description);
    }

    @GetMapping("/appointments/user/{userId}")
    public Iterable<AppointmentEntity> getAppointmentsByUserName(@PathVariable int userId) {
              UserEntity user= userClient.getUserByID(userId);
              String name= user.getFirstName();
        return appointmentService.ListAppointmentsByUserName(name);
    }
   @GetMapping("/userName/{name}")
    public Iterable<UserEntity>getUser(@PathVariable String name){
       List <UserEntity> users=userClient.getUsersByFirstName(name);
       return users;
   }
    @PostMapping(path="/addAppointment")
    public ResponseEntity<?> addAppointment(
            @RequestParam("userId") int userId,
            @RequestBody AppointmentEntity appointment) {
            // Dohvatanje korisnika koristeći Feign klijent
            UserEntity user = userClient.getUserByID(userId);
        if (user == null) {
            throw new UserNotFoundException("Not found user by id " + userId);
        }
         UserEntity user1= new UserEntity();
        user1.setEmail(user.getEmail());
        user1.setFirstName(user.getFirstName());
        user1.setLastName(user.getLastName());
        user1.setType(user.getType());
        user1.setPasswordHash(user.getPasswordHash());
        userRepository.save(user1);
            // Postavljanje korisnika  u appointment
        appointment.setUser(user1);
            // Spremanje appointmenta u bazu
            AppointmentEntity savedAppointment = appointmentRepository.save(appointment);

            // Vraćanje odgovora
            return ResponseEntity.ok(savedAppointment);

    }


}
