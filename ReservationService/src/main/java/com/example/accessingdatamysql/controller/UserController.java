
package com.example.accessingdatamysql.controller;


import com.example.accessingdatamysql.entity.AppointmentEntity;
import com.example.accessingdatamysql.entity.UserEntity;
import com.example.accessingdatamysql.exceptions.UserNotFoundException;
import com.example.accessingdatamysql.repository.AppointmentRepository;
import com.example.accessingdatamysql.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController// This means that this class is a Controller
@Validated
@RequestMapping(path="/reservation") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private AppointmentRepository appointmentRepository;
    @PostMapping(path="/addUser") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String email, @RequestParam String firstName,
                                            @RequestParam String lastName, @RequestParam Integer type,
                                            @RequestParam String passwordHash) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        UserEntity n = new UserEntity();
        n.setEmail(email);
        n.setFirstName(firstName);
        n.setLastName(lastName);
        n.setType(type);
        n.setPasswordHash(passwordHash);
        userRepository.save(n);
        return "Saved";
    }
    @GetMapping(path="/allUsers")
    public @ResponseBody Iterable<UserEntity> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    @GetMapping(path = "/appointments-for-user/{userId}")
    public List<AppointmentEntity> getAppointmentsForUser(@PathVariable int userId){
        UserEntity user=userRepository.findById(userId);
        if (user==null) {
            throw new UserNotFoundException("Not found user by id " + userId);
        }
        return appointmentRepository.findByUser(user);

    }
}

